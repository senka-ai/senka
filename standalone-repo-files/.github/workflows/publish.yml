name: Publish to npm

on:
  push:
    branches: [main]
    paths: ['package.json']
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write  # Required for creating releases
  packages: write  # Required for publishing packages

jobs:
  quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Run type checking
        run: npm run typecheck

      - name: Run Svelte checking  
        run: npm run svelte-check

      - name: Build library
        run: npm run build

      - name: Run tests
        run: npm test

  publish:
    needs: quality
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Build library
        run: npm run build

      - name: Get package info
        id: package-info
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          echo "version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          echo "name=$PACKAGE_NAME" >> $GITHUB_OUTPUT

      - name: Check if version exists on npm
        id: version-check
        run: |
          if npm view ${{ steps.package-info.outputs.name }}@${{ steps.package-info.outputs.version }} version 2>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "⚠️ Version ${{ steps.package-info.outputs.version }} already exists on npm"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "✅ Version ${{ steps.package-info.outputs.version }} is new"
          fi

      - name: Publish to npm
        if: steps.version-check.outputs.exists == 'false'
        run: |
          echo "🚀 Publishing ${{ steps.package-info.outputs.name }}@${{ steps.package-info.outputs.version }} to npm..."
          npm publish
          echo "✅ Successfully published to npm!"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub release
        if: steps.version-check.outputs.exists == 'false'
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const { data: release } = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: `v${{ steps.package-info.outputs.version }}`,
                name: `Release v${{ steps.package-info.outputs.version }}`,
                body: `🚀 **senka-ui v${{ steps.package-info.outputs.version }}**\n\nAutomatic release from monorepo sync.\n\n📦 [View on npm](https://www.npmjs.com/package/${{ steps.package-info.outputs.name }})\n\n🔄 Synced from [senka-ai/senka](https://github.com/senka-ai/senka)`,
                draft: false,
                prerelease: false
              });
              
              console.log(`✅ Created release: ${release.html_url}`);
            } catch (error) {
              console.log(`⚠️ Could not create GitHub release: ${error.message}`);
              console.log('💡 This is optional - npm publishing was successful');
              console.log('🔧 To fix: Add "contents: write" permission to GITHUB_TOKEN or setup a PAT with repo permissions');
            }

      - name: Skip publish (version exists)
        if: steps.version-check.outputs.exists == 'true'
        run: |
          echo "⏭️ Skipping publish: Version ${{ steps.package-info.outputs.version }} already exists on npm"
          echo "💡 To publish a new version, update the version in package.json"

      - name: Summary
        if: steps.version-check.outputs.exists == 'false'
        run: |
          echo "🎉 **Publishing Complete!**"
          echo ""
          echo "📦 **Package**: ${{ steps.package-info.outputs.name }}@${{ steps.package-info.outputs.version }}"
          echo "🔗 **npm**: https://www.npmjs.com/package/${{ steps.package-info.outputs.name }}"
          echo "📊 **Registry**: https://npm-stat.com/charts.html?package=${{ steps.package-info.outputs.name }}"
          echo ""
          echo "✅ Successfully published to npm registry!"