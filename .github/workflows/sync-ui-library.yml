name: Sync UI Library to senka-ui

on:
  push:
    branches: [main]
    # No path filter - always run, but check for changes inside the workflow
  workflow_dispatch:
    inputs:
      force_sync:
        description: 'Force sync even without UI changes'
        required: false
        default: 'false'
        type: boolean
  schedule:
    # Run daily at 2 AM UTC to catch any missed syncs
    - cron: '0 2 * * *'

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout monorepo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Enable Corepack for Yarn 4
        run: |
          corepack enable
          yarn --version

      - name: Install dependencies
        run: yarn install --immutable

      - name: Check if UI changes exist
        id: ui-changes
        run: |
          echo "🔍 Event details:"
          echo "  - Event name: ${{ github.event_name }}"
          echo "  - Ref: ${{ github.ref }}"
          echo "  - SHA: ${{ github.sha }}"
          echo "  - Actor: ${{ github.actor }}"
          echo ""
          
          # Check for UI changes in the latest commit
          UI_CHANGES=0
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.force_sync }}" == "true" ]]; then
            echo "🔄 Force sync requested via manual trigger"
            UI_CHANGES=1
          elif [[ "${{ github.event_name }}" == "schedule" ]]; then
            echo "🕒 Scheduled run - will check for sync differences later"
            UI_CHANGES=1
          else
            # Check if the latest commit contains UI changes
            UI_FILES_IN_LATEST=$(git diff-tree --no-commit-id --name-only -r HEAD | grep '^packages/ui/' | wc -l)
            echo "UI files changed in latest commit: $UI_FILES_IN_LATEST"
            
            if [[ $UI_FILES_IN_LATEST -gt 0 ]]; then
              echo "🔄 UI changes detected in latest commit"
              UI_CHANGES=1
            else
              echo "⏭️ No UI changes in latest commit - skipping workflow"
              UI_CHANGES=0
            fi
          fi
          
          echo "ui-changes=$UI_CHANGES" >> $GITHUB_OUTPUT
          
          if [[ $UI_CHANGES -eq 0 ]]; then
            exit 0  # Exit gracefully, skipping remaining steps
          fi

      - name: Run type checking
        if: steps.ui-changes.outputs.ui-changes == '1'
        run: yarn ui:typecheck

      - name: Run Svelte checking
        if: steps.ui-changes.outputs.ui-changes == '1'
        run: yarn ui:check

      - name: Build UI library
        if: steps.ui-changes.outputs.ui-changes == '1'
        run: yarn ui:build

      - name: Run tests
        if: steps.ui-changes.outputs.ui-changes == '1'
        run: yarn ui:test

      - name: Checkout senka-ui repo
        if: steps.ui-changes.outputs.ui-changes == '1'
        uses: actions/checkout@v4
        with:
          repository: senka-ai/senka-ui
          token: ${{ secrets.SYNC_TOKEN }}
          path: ./synced-repo

      - name: Prepare sync directory
        if: steps.ui-changes.outputs.ui-changes == '1'
        run: |
          # Create temporary directory for sync preparation
          mkdir -p ./sync-temp

          # Copy UI package contents
          cp -r packages/ui/* ./sync-temp/

          # Remove build artifacts and temp files
          rm -rf ./sync-temp/node_modules
          rm -rf ./sync-temp/dist
          rm -rf ./sync-temp/.svelte-kit
          rm -rf ./sync-temp/storybook-static
          rm -rf ./sync-temp/playwright-report
          rm -rf ./sync-temp/test-results

          # Create package-lock.json from yarn.lock for npm compatibility
          cd ./sync-temp
          npm install --package-lock-only
          cd ..

          # Create a standalone README for the UI library
          cat > ./sync-temp/README.md << 'EOF'
          # senka-ui

          A modern, type-safe Svelte 5 UI component library with full theme support, accessibility standards, and robust state management patterns.

          ## Installation

          ```bash
          npm install senka-ui
          # Peer dependencies
          npm install svelte @tailwindcss/vite
          ```

          ## Usage

          ```typescript
          // Import styles
          import 'senka-ui/styles'

          // Import components
          import { Button, TextField, Card } from 'senka-ui'

          <Button variant="primary" onclick={() => console.log('clicked')}>
            {#snippet children()}
              Click me!
            {/snippet}
          </Button>
          ```

          ## Documentation

          For full documentation and examples, visit our [Storybook](https://senka-ui-storybook.vercel.app).

          ## Development

          This package is part of the [Senka monorepo](https://github.com/senka-ai/senka). 
          For development instructions, please see the main repository.

          ## License

          MIT
          EOF

      - name: Update package.json for standalone repo
        if: steps.ui-changes.outputs.ui-changes == '1'
        run: |
          cd ./sync-temp

          # Update repository URLs and scripts for standalone repo
          node -e "
            const pkg = require('./package.json');
            pkg.repository.url = 'https://github.com/senka-ai/senka-ui.git';
            pkg.bugs.url = 'https://github.com/senka-ai/senka-ui/issues';
            pkg.homepage = 'https://github.com/senka-ai/senka-ui';
            delete pkg.repository.directory;
            
            // Update scripts to use npm instead of yarn
            if (pkg.scripts) {
              pkg.scripts.typecheck = pkg.scripts.typecheck || 'tsc --noEmit --strict --skipLibCheck';
              pkg.scripts['svelte-check'] = pkg.scripts['svelte-check'] || 'svelte-check --tsconfig ./tsconfig.json';
            }
            
            require('fs').writeFileSync('./package.json', JSON.stringify(pkg, null, 2));
          "

      - name: Sync to senka-ui repository
        if: steps.ui-changes.outputs.ui-changes == '1'
        run: |
          cd ./synced-repo

          # Get current commit info from monorepo
          COMMIT_SHA="${{ github.sha }}"
          COMMIT_MSG="$(cd .. && git log -1 --pretty=format:'%s' $COMMIT_SHA)"

          # Clear existing content (except .git)
          find . -mindepth 1 -maxdepth 1 ! -name '.git' -exec rm -rf {} + 2>/dev/null || true

          # Copy prepared sync content
          cp -r ../sync-temp/* .
          cp -r ../sync-temp/.* . 2>/dev/null || true

          # Copy standalone repo workflows
          mkdir -p .github/workflows
          if [ -f "../standalone-repo-files/.github/workflows/publish.yml" ]; then
            cp ../standalone-repo-files/.github/workflows/publish.yml .github/workflows/
          fi

          # Configure git
          git config user.name "senka-sync-bot"
          git config user.email "sync-bot@senka.ai"

          # Check if there are changes (or force sync)
          # Check for untracked files, modified files, or staged files
          UNTRACKED_FILES=$(git ls-files --others --exclude-standard)
          
          echo "📊 Sync Status:"
          echo "  - Trigger: ${{ github.event_name }}"
          echo "  - Force sync: ${{ github.event.inputs.force_sync }}"
          echo "  - Untracked files: $(echo "$UNTRACKED_FILES" | wc -l | tr -d ' ') files"
          echo "  - Modified files: $(git diff --name-only | wc -l | tr -d ' ') files"
          echo "  - Staged files: $(git diff --cached --name-only | wc -l | tr -d ' ') files"
          
          # Determine if sync should run
          SHOULD_SYNC=false
          if [[ "${{ github.event.inputs.force_sync }}" == "true" ]]; then
            echo "🔄 Sync triggered: Force sync requested"
            SHOULD_SYNC=true
          elif [[ "${{ github.event_name }}" == "schedule" ]]; then
            # For scheduled runs, only sync if there are actual differences
            if [[ -n "$UNTRACKED_FILES" ]] || ! (git diff --quiet && git diff --cached --quiet); then
              echo "🔄 Sync triggered: Scheduled run found changes"
              SHOULD_SYNC=true
            else
              echo "⏭️  Sync skipped: Scheduled run found no changes"
            fi
          elif [[ -n "$UNTRACKED_FILES" ]] || ! (git diff --quiet && git diff --cached --quiet); then
            echo "🔄 Sync triggered: Changes detected"
            SHOULD_SYNC=true
          else
            echo "⏭️  Sync skipped: No changes detected"
          fi
          
          if [[ "$SHOULD_SYNC" == "true" ]]; then
            # Commit and push changes
            git add .
            git commit -m "Sync from monorepo: $COMMIT_MSG

            Source commit: $COMMIT_SHA
            Synced by: ${{ github.actor }}
            
            🤖 Auto-synced from senka-ai/senka monorepo"
            git push origin main
            echo "sync_performed=true" >> $GITHUB_OUTPUT
            echo "✅ Successfully synced UI library to senka-ui repository"
          else
            echo "No changes to sync"
            echo "sync_performed=false" >> $GITHUB_OUTPUT
          fi

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🔄 UI library changes will be synced to [senka-ai/senka-ui](https://github.com/senka-ai/senka-ui) when this PR is merged.'
            })
